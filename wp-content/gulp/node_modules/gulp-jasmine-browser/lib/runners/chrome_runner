#!/usr/bin/env node

'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('babel-polyfill');

(function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _require, Server, puppeteer, run, _args$, port, query, _process$env, STREAM_PORT, _process$env$WITH_SAN, WITH_SANDBOX, url, server, browser, _args, page;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _require = require('ws'), Server = _require.Server;
            puppeteer = require('puppeteer');
            run = require('./chrome_evaluate');
            _args$ = args[2], port = _args$ === undefined ? 8888 : _args$, query = args[3];
            _process$env = process.env, STREAM_PORT = _process$env.STREAM_PORT, _process$env$WITH_SAN = _process$env.WITH_SANDBOX, WITH_SANDBOX = _process$env$WITH_SAN === undefined ? 'false' : _process$env$WITH_SAN;
            url = 'http://localhost:' + port + '/consoleRunner';

            if (query) url += '/?' + query;

            server = void 0;
            _context.prev = 8;

            server = new Server({ port: STREAM_PORT });
            server.on('connection', function (socket) {
              return socket.on('message', console.error);
            });

            browser = void 0;
            _context.prev = 12;
            _args = [];

            if (!JSON.parse(WITH_SANDBOX)) _args.push('--no-sandbox');
            _context.next = 17;
            return puppeteer.launch({ args: _args });

          case 17:
            browser = _context.sent;
            _context.next = 20;
            return browser.newPage();

          case 20:
            page = _context.sent;
            _context.next = 23;
            return page.on('console', function (_ref2) {
              var args = _ref2.args;

              console.error((0, _stringify2.default)({ id: ':consoleMessage', message: args.join('\n') }));
            });

          case 23:
            _context.next = 25;
            return page.goto(url);

          case 25:
            _context.next = 27;
            return page.evaluate(run, STREAM_PORT);

          case 27:
            _context.prev = 27;

            browser && browser.close();
            return _context.finish(27);

          case 30:
            _context.prev = 30;

            server.close();
            return _context.finish(30);

          case 33:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[8,, 30, 33], [12,, 27, 30]]);
  }));

  function run() {
    return _ref.apply(this, arguments);
  }

  return run;
})().apply(undefined, process.argv);