"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const which_1 = require("@cedx/which");
const log = require("fancy-log");
const stream_1 = require("stream");
const pkg = require("../package.json");
const fast_transformer_1 = require("./fast_transformer");
const safe_transformer_1 = require("./safe_transformer");
const transform_mode_1 = require("./transform_mode");
class Minifier extends stream_1.Transform {
    constructor(options = {}) {
        super({ objectMode: true });
        this._transformer = null;
        const { binary = '', mode = transform_mode_1.TransformMode.safe, silent = false } = options;
        this.binary = binary;
        this.mode = mode;
        this.silent = silent;
        const handler = async () => { if (this._transformer)
            await this._transformer.close(); };
        this.on('end', handler).on('error', handler);
    }
    async _transform(file, encoding = 'utf8', callback) {
        try {
            if (!this._transformer) {
                const executable = this.binary.length ? this.binary : await which_1.which('php', { onError: () => 'php' });
                this._transformer = this.mode == transform_mode_1.TransformMode.fast ? new fast_transformer_1.FastTransformer(executable) : new safe_transformer_1.SafeTransformer(executable);
            }
            if (!this.silent)
                log(`Minifying: ${file.path}`);
            file.contents = Buffer.from(await this._transformer.transform(file.path), encoding);
            if (callback)
                callback(undefined, file);
        }
        catch (err) {
            if (callback)
                callback(new Error(`[${pkg.name}] ${err.message}`));
            else
                throw err;
        }
        return file;
    }
}
exports.Minifier = Minifier;
//# sourceMappingURL=minifier.js.map